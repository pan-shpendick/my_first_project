from customtkinter import *
from socket import *
import base64
import io
import os
import sys
from PIL import Image, ImageDraw
import threading

# —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø–∞–ø–∫—É, –≥–¥–µ –ª–µ–∂–∏—Ç client.py
os.chdir(os.path.dirname(os.path.abspath(sys.argv[0])))


def make_round_image(path, size=(40, 40), bg_color=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CTkImage —Å –∫—Ä—É–≥–ª–æ–π –º–∞—Å–∫–æ–π."""
    pil = Image.open(path).resize(size, Image.LANCZOS).convert("RGBA")
    mask = Image.new("L", size, 0)
    draw = ImageDraw.Draw(mask)
    draw.ellipse((0, 0, size[0], size[1]), fill=255)
    pil.putalpha(mask)

    if bg_color:
        background = Image.new("RGBA", size, bg_color)
        background.paste(pil, (0, 0), mask=mask)
        pil = background

    return CTkImage(light_image=pil, size=size)


def change_avatar(main_window, current_avatar_label):
    window_avatar = CTkToplevel(main_window)
    window_avatar.title("–í–∏–±—ñ—Ä –∞–≤–∞—Ç–∞—Ä–∞")
    window_avatar.resizable(False, False)
    window_avatar.geometry(f"300x300")

    avatars_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "avatars")
    if not os.path.isdir(avatars_dir):
        CTkLabel(window_avatar, text="‚ö†Ô∏è –ù–µ–º–∞—î –ø–∞–ø–∫–∏ 'avatars/'").pack(pady=50)
        return

    avatar_files = [f for f in os.listdir(avatars_dir) if f.lower().endswith((".png", ".jpg", ".jpeg"))]

    if not avatar_files:
        CTkLabel(window_avatar, text="‚ö†Ô∏è –ù–µ–º–∞—î –∞–≤–∞—Ç–∞—Ä—ñ–≤ —É –ø–∞–ø—Ü—ñ 'avatars/'").pack(pady=50)
        return

    frame = CTkFrame(window_avatar)
    frame.pack(padx=10, pady=10, fill="both", expand=True)

    def select_avatar(path):
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
        main_window.avatar_path = path
        img = CTkImage(light_image=Image.open(path), size=(50, 50))
        current_avatar_label.configure(image=img)
        current_avatar_label.image = img

        # ‚ö†Ô∏è –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä!
        window_avatar.destroy()

    row, col = 0, 0
    for file in avatar_files:
        path = os.path.join(avatars_dir, file)
        try:
            img = CTkImage(light_image=Image.open(path), size=(70, 70))
        except Exception:
            # –µ—Å–ª–∏ —Ñ–∞–π–ª –±–∏—Ç—ã–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
        btn = CTkButton(frame, image=img, text="", width=70, height=70,
                        fg_color="transparent", hover_color="#2b2b2b",
                        command=lambda p=path: select_avatar(p))
        btn.grid(row=row, column=col, padx=5, pady=5)
        col += 1
        if col > 2:   # –º–∞–∫—Å–∏–º—É–º 3 –≤ —Ä—è–¥
            col = 0
            row += 1


class MainWindow(CTk):
    def __init__(self):
        super().__init__()
        self.geometry('500x400')
        self.label = None
        self.username = ""
        self.avatar_path = "images.jpg"
        self.avatars_by_user = {}

        # menu frame
        self.menu_frame = CTkFrame(self, height=300, width=40)
        self.menu_frame.pack_propagate(False)
        self.menu_frame.place(x=0, y=0)

        self.is_show_menu = False
        self.speed_animate_menu = -5

        self.btn = CTkButton(self, text="‚öôÔ∏è", width=30, command=self.menu)
        self.btn.place(x=0, y=0)

        self.open_img_button = CTkButton(self, text="*", width=50, height=40, command=self.open_file)
        self.open_img_button.place(x=0, y=0)

        self.chat_field = CTkScrollableFrame(self)
        self.chat_field.place(x=0, y=0)
        self.message_frame = self.chat_field

        self.message_entry = CTkEntry(self, placeholder_text="–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", height=40)
        self.message_entry.place(x=0, y=0)

        self.send_button = CTkButton(self, text=">", width=50, height=40, command=self.send_message)
        self.send_button.place(x=0, y=0)

        # –∞–≤–∞—Ç–∞—Ä–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –∞–≤–∞—Ç–∞—Ä–∞
        self.avatar_label = CTkLabel(self, text="")
        self.avatar_label.pack(pady=10)
        self.change_avatar_button = CTkButton(
            self, text="–ó–º—ñ–Ω–∏—Ç–∏ –∞–≤–∞—Ç–∞—Ä",
            command=lambda: change_avatar(self, self.avatar_label)
        )
        # –ø–æ–∫–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º change_avatar_button; –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é

        # –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ update_profile_avatar)
        self.profile_avatar_label = self.avatar_label

        # –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        try:
            self.sock = socket(AF_INET, SOCK_STREAM)
            self.sock.connect(("localhost", 8080))
            hello = f"TEXT@{self.username}@–ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É\n"
            self.sock.send(hello.encode('utf-8'))
            threading.Thread(target=self.recv_message, daemon=True).start()
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî —Å—Ç–∞–≤–∏–º sock = None –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.sock = None
            self.add_message("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")

        # –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫ —Å–µ—Ä–¥–µ—á–µ–∫ (—á—Ç–æ–±—ã –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑)
        self.heart_white_img = None
        self.heart_purple_img = None
        try:
            self.heart_white_img = CTkImage(light_image=Image.open("heart_white.png"), size=(20, 20))
            self.heart_purple_img = CTkImage(light_image=Image.open("heart_purple.png"), size=(20, 20))
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏
            self.heart_white_img = None
            self.heart_purple_img = None

        # –∑–∞–ø—É—Å–∫–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π layout
        self.adaptive_tiger()

    def menu(self):
        # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é
        self.is_show_menu = not self.is_show_menu
        self.speed_animate_menu *= -1
        self.btn.configure(text="‚öôÔ∏è")
        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–∏–¥–∂–µ—Ç—ã –º–µ–Ω—é (–µ—Å–ª–∏ –µ—Å—Ç—å) –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        for w in self.menu_frame.winfo_children():
            w.destroy()

        if self.is_show_menu:
            # –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.label = CTkLabel(self.menu_frame, text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–º'—è")
            self.label.pack(pady=10)

            self.entry = CTkEntry(self.menu_frame)
            self.entry.pack(padx=10)

            self.save_btn = CTkButton(self.menu_frame, text="–ó–±–µ—Ä–µ–≥—Ç–∏", command=self.save_username)
            self.save_btn.pack(pady=10)

            self.button_avatar = CTkButton(
                self.menu_frame, text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–≤–∞—Ç–∞—Ä",
                command=lambda: change_avatar(self, self.avatar_label)
            )
            self.button_avatar.pack(pady=10)
        else:
            # –º–µ–Ω—é —Å–∫—Ä—ã–≤–∞–µ–º ‚Äî –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ
            pass

        # –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã
        self.show_menu()

    def save_username(self):
        self.new_name = self.entry.get().strip()
        if self.new_name:
            self.username = self.new_name
            self.add_message(f"–í–∞—à–µ —ñ–º‚Äô—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {self.username}", author=self.username, is_self=True)

    def show_menu(self):
        # –ø—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã –º–µ–Ω—é
        current_w = self.menu_frame.winfo_width()
        target_open = 200
        target_closed = 40

        # –¥–≤–∏–≥–∞–µ–º –≤ —Å—Ç–æ—Ä–æ–Ω—É —Ü–µ–ª–∏
        if self.is_show_menu and current_w < target_open:
            self.menu_frame.configure(width=min(target_open, current_w + abs(self.speed_animate_menu)))
            self.after(10, self.show_menu)
        elif (not self.is_show_menu) and current_w > target_closed:
            self.menu_frame.configure(width=max(target_closed, current_w - abs(self.speed_animate_menu)))
            self.after(10, self.show_menu)

    def add_message(self, message, author, is_me=False):
        row_frame = CTkFrame(self.message_frame, fg_color="transparent")
        row_frame.pack(fill="x", pady=2)

        if not is_me:  # üëà —Ç–æ–ª—å–∫–æ —É —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–≤–∞—Ç–∞—Ä–∫–∞
            avatar_path = self.avatars_by_user.get(author, self.avatar_path)

            if avatar_path and os.path.isfile(avatar_path):
                try:
                    avatar = make_round_image(avatar_path, size=(40, 40))
                except Exception:
                    avatar = None
            else:
                avatar = None

            if avatar:
                avatar_frame = CTkFrame(row_frame, fg_color="transparent")
                avatar_frame.pack(side="left", padx=5)
                avatar_label = CTkLabel(avatar_frame, image=avatar, text="", fg_color="transparent")
                avatar_label.image = avatar
                avatar_label.pack()

        # —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        msg_label = CTkLabel(
            row_frame,
            text=message,
            anchor="w" if not is_me else "e",
            fg_color="#2b2b2b" if not is_me else "#1f6aa5",
            text_color="white",
            padx=10,
            pady=5,
            corner_radius=10,
        )
        msg_label.pack(side="left" if not is_me else "right", padx=5)

        # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        message_frame = CTkFrame(row_frame, fg_color="#f0f0f0", corner_radius=8)
        message_frame.pack(side="left" if not is_me else "right", padx=5, pady=2)

        wraplength_size = max(100, self.winfo_width() - 250)

        if author and not is_me:
            CTkLabel(
                message_frame, text=author, text_color="#6a5acd",
                font=("Arial", 12, "bold"), anchor="w", justify="left"
            ).pack(padx=10, pady=(5, 0), anchor="w")

        if img:
            CTkLabel(
                message_frame, text=message, image=img, compound="top",
                text_color="black", justify="left", wraplength=wraplength_size
            ).pack(padx=10, pady=(0, 5), anchor="w")
        else:
            CTkLabel(
                message_frame, text=message, text_color="black",
                justify="left", wraplength=wraplength_size
            ).pack(padx=10, pady=(0, 5), anchor="w")

        # ‚ù§Ô∏è –ª–∞–π–∫
        like_frame = CTkFrame(row_frame, fg_color="transparent")
        like_frame.pack(side="right" if is_me else "left", padx=5)

        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        heart_white_img = self.heart_white_img
        heart_purple_img = self.heart_purple_img

        # –µ—Å–ª–∏ –∏–∫–æ–Ω–æ–∫ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –º–µ—Ç–∫—É
        if heart_white_img is None:
            heart_label = CTkLabel(like_frame, text="‚ô°", fg_color="transparent", cursor="hand2")
        else:
            heart_label = CTkLabel(like_frame, image=heart_white_img, text="", fg_color="transparent", cursor="hand2")
            heart_label.image = heart_white_img

        heart_label.pack()
        heart_label.liked = False

        def toggle_heart(event=None, from_server=False):
            heart_label.liked = not heart_label.liked
            if heart_white_img and heart_purple_img:
                heart_label.configure(image=(heart_purple_img if heart_label.liked else heart_white_img))
                heart_label.image = (heart_purple_img if heart_label.liked else heart_white_img)
            else:
                heart_label.configure(text="‚ù§" if heart_label.liked else "‚ô°")

            if not from_server and self.sock:
                try:
                    data = f"LIKE@{author}@{message}\n"
                    self.sock.sendall(data.encode())
                except:
                    pass

        # —Å–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–∫
        heart_label.bind("<Button-1>", lambda e: toggle_heart())

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∞–π–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
        if not hasattr(self, "messages"):
            self.messages = []
        self.messages.append({"author": author, "message": message, "heart": heart_label, "toggle": toggle_heart})

    def update_profile_avatar(self):
        avatar_path = self.avatars_by_user.get(self.username, self.avatar_path)
        if not os.path.isfile(avatar_path):
            avatar_path = self.avatar_path if os.path.isfile(self.avatar_path) else None
        if avatar_path:
            avatar = make_round_image(avatar_path, size=(60, 60))
            self.profile_avatar_label.configure(image=avatar)
            self.profile_avatar_label.image = avatar

    def send_message(self):
        message = self.message_entry.get().strip()
        if message:
            self.add_message(message, author=self.username)
            data = f"TEXT@{self.username}@{message}\n"
            try:
                if self.sock:
                    self.sock.sendall(data.encode())
            except:
                pass
            self.message_entry.delete(0, len(self.message_entry.get()))

    def recv_message(self):
        buffer = ""
        while True:
            try:
                chunk = self.sock.recv(4096)
                if not chunk:
                    break
                buffer += chunk.decode('utf-8', errors="ignore")
                while "\n" in buffer:
                    line, buffer = buffer.split("\n", 1)
                    self.handle_line(line.strip())
            except:
                break
        if getattr(self, "sock", None):
            try:
                self.sock.close()
            except:
                pass
        self.sock = None

    def open_file(self):
        file_name = filedialog.askopenfilename()
        if not file_name:
            return
        try:
            with open(file_name, "rb") as f:
                raw = f.read()
            b64_data = base64.b64encode(raw).decode()
            short_name = os.path.basename(file_name)
            data = f"IMAGE@{self.username}@{short_name}@{b64_data}\n"
            if self.sock:
                self.sock.sendall(data.encode())
            ctk_img = CTkImage(light_image=Image.open(file_name), size=(150, 150))
            self.add_message("", img=ctk_img, author=self.username)
        except Exception as e:
            self.add_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

    def adaptive_tiger(self):
        # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥ –æ–∫–Ω–æ
        try:
            self.menu_frame.configure(height=self.winfo_height())
            self.chat_field.place(x=self.menu_frame.winfo_width())
            self.chat_field.configure(width=max(100, self.winfo_width() - self.menu_frame.winfo_width() - 20),
                                      height=max(100, self.winfo_height() - self.message_entry.winfo_height() - self.btn.winfo_height()))
            self.send_button.place(x=max(0, self.winfo_width() - self.send_button.winfo_width()),
                                   y=max(0, self.winfo_height() - self.send_button.winfo_height()))
            self.message_entry.place(x=self.menu_frame.winfo_width(),
                                     y=max(0, self.winfo_height() - self.message_entry.winfo_height()))
            self.message_entry.configure(width=max(100, self.winfo_width() - self.menu_frame.winfo_width() - 110))
            self.open_img_button.place(x=max(0, self.winfo_width() - 105), y=self.send_button.winfo_y())
        except Exception:
            pass
        self.after(50, self.adaptive_tiger)

    def handle_line(self, line):
        if not line:
            return
        parts = line.split("@", 3)
        msg_type = parts[0]

        if msg_type == "TEXT":
            if len(parts) >= 3:
                author = parts[1]
                message = parts[2]
                self.add_message(message, author=author)

        elif msg_type == "IMAGE":
            if len(parts) >= 4:
                author = parts[1]
                filename = parts[2]
                b64_img = parts[3]
                try:
                    img_data = base64.b64decode(b64_img)
                    pil_img = Image.open(io.BytesIO(img_data))
                    ctk_img = CTkImage(light_image=pil_img, size=(150, 150))
                    self.add_message("", img=ctk_img, author=author)
                except Exception as e:
                    self.add_message(f"–ü–æ–º–∏–ª–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

        elif msg_type == "LIKE":
            if len(parts) >= 3:
                author = parts[1]
                message = parts[2]
                for msg in getattr(self, "messages", []):
                    if msg["author"] == author and msg["message"] == message:
                        # –æ—Ç–º–µ—Ç–∫–∞ –ª–∞–π–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ‚Äî –Ω–µ —à–ª—ë–º –æ–±—Ä–∞—Ç–Ω–æ
                        msg["toggle"](from_server=True)
                        break
        else:
            self.add_message(line)


if __name__ == "__main__":
    global main_window
    main_window = MainWindow()
    main_window.mainloop()
